(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{58:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(2),i=(a(0),a(96));const r={id:"build",title:"@build-tracker/build",sidebar_label:"@build-tracker/build"},l={unversionedId:"packages/build",id:"packages/build",isDocsHomePage:!1,title:"@build-tracker/build",description:"Install",source:"@site/docs/packages/build.md",slug:"/packages/build",permalink:"/docs/packages/build",editUrl:"https://github.com/paularmstrong/build-tracker/edit/main/docs/docs/packages/build.md",version:"current",sidebar_label:"@build-tracker/build",sidebar:"docs",previous:{title:"@build-tracker/app",permalink:"/docs/packages/app"},next:{title:"@build-tracker/cli",permalink:"/docs/packages/cli"}},c=[{value:"Install",id:"install",children:[]},{value:"<code>Build</code>",id:"build",children:[]},{value:"Useful Methods",id:"useful-methods",children:[{value:"<code>Build.toJson()</code>",id:"buildtojson",children:[]},{value:"<code>get Build.meta(): BuildMeta</code>",id:"get-buildmeta-buildmeta",children:[]},{value:"<code>get Build.timestamp(): Date</code>",id:"get-buildtimestamp-date",children:[]},{value:"<code>getMetaValue(key: string): string</code>",id:"getmetavaluekey-string-string",children:[]},{value:"<code>getMetaUrl(key: string): string | undefined</code>",id:"getmetaurlkey-string-string--undefined",children:[]},{value:"<code>getSum(artifactNames: Array&lt;string&gt;): ArtifactSizes</code>",id:"getsumartifactnames-arraystring-artifactsizes",children:[]},{value:"<code>getTotals(artifactFilters?: Array&lt;RegExp&gt;): ArtifactSizes</code>",id:"gettotalsartifactfilters-arrayregexp-artifactsizes",children:[]}]},{value:"Types",id:"types",children:[{value:"<code>BuildMeta</code>",id:"buildmeta",children:[]},{value:"<code>Artifact</code>",id:"artifact",children:[]}]}],s={rightToc:c};function b({components:e,...t}){return Object(i.b)("wrapper",Object(n.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"install"},"Install"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"yarn add @build-tracker/build@latest\n# or\nnpm install --save @build-tracker/build@latest\n")),Object(i.b)("h2",{id:"build"},Object(i.b)("inlineCode",{parentName:"h2"},"Build")),Object(i.b)("p",null,"Construct a new build by passing it both the build's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#buildmeta"}),Object(i.b)("inlineCode",{parentName:"a"},"BuildMeta"))," and array of ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#artifact"}),Object(i.b)("inlineCode",{parentName:"a"},"Artifact"),"s"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"new Build({\n  revision: '1234567',\n  parentRevision: 'abcdefg',\n  timestamp: 1577038148378,\n  branch: 'main',\n});\n")),Object(i.b)("h2",{id:"useful-methods"},"Useful Methods"),Object(i.b)("p",null,"The following is a short selection of useful methods provided by the ",Object(i.b)("inlineCode",{parentName:"p"},"Build")," class."),Object(i.b)("h3",{id:"buildtojson"},Object(i.b)("inlineCode",{parentName:"h3"},"Build.toJson()")),Object(i.b)("p",null,"Returns a JSON representation of the Build."),Object(i.b)("h3",{id:"get-buildmeta-buildmeta"},Object(i.b)("inlineCode",{parentName:"h3"},"get Build.meta(): BuildMeta")),Object(i.b)("p",null,"Get a JSON representation of the full metadata of a Build."),Object(i.b)("h3",{id:"get-buildtimestamp-date"},Object(i.b)("inlineCode",{parentName:"h3"},"get Build.timestamp(): Date")),Object(i.b)("p",null,"Get a ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," representation of the timestamp from the ",Object(i.b)("inlineCode",{parentName:"p"},"BuildMeta")),Object(i.b)("h3",{id:"getmetavaluekey-string-string"},Object(i.b)("inlineCode",{parentName:"h3"},"getMetaValue(key: string): string")),Object(i.b)("p",null,"Get the string value of a build meta entry."),Object(i.b)("h3",{id:"getmetaurlkey-string-string--undefined"},Object(i.b)("inlineCode",{parentName:"h3"},"getMetaUrl(key: string): string | undefined")),Object(i.b)("p",null,"Get the URL value of a build meta entry. If one was not provided, this will return ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.b)("h3",{id:"getsumartifactnames-arraystring-artifactsizes"},Object(i.b)("inlineCode",{parentName:"h3"},"getSum(artifactNames: Array<string>): ArtifactSizes")),Object(i.b)("p",null,"Returns an object listing the total sum of the sizes for every key available in ",Object(i.b)("inlineCode",{parentName:"p"},"ArtifactSizes")," per the requested array of artifact names."),Object(i.b)("h4",{id:"example"},"Example"),Object(i.b)("p",null,"Get the sum of a specific list of artifacts:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"myBuild.getSum(['main', 'vendor', 'shared']);\n")),Object(i.b)("h3",{id:"gettotalsartifactfilters-arrayregexp-artifactsizes"},Object(i.b)("inlineCode",{parentName:"h3"},"getTotals(artifactFilters?: Array<RegExp>): ArtifactSizes")),Object(i.b)("p",null,"Returns an object listing the total sum of the sizes for every key available in ",Object(i.b)("inlineCode",{parentName:"p"},"ArtifactSizes")," for all artifacts in a Build."),Object(i.b)("p",null,"If the first argument is provided, any artifact name that matches one of the regular expressions in the array will not be included in the sum total."),Object(i.b)("h4",{id:"filter-example"},"Filter Example"),Object(i.b)("p",null,"To filter out any artifact that matches ",Object(i.b)("inlineCode",{parentName:"p"},"i18n/.*")," except for the ",Object(i.b)("inlineCode",{parentName:"p"},"i18n/en")," artifact:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"myBuild.getTotals([/^i18n\\/(?!en$).*$/]);\n")),Object(i.b)("h2",{id:"types"},"Types"),Object(i.b)("h3",{id:"buildmeta"},Object(i.b)("inlineCode",{parentName:"h3"},"BuildMeta")),Object(i.b)("p",null,"Build meta includes useful information for identifying the build in your system. This information is visible in the web application's interface."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"interface BuildMeta {\n  // Unique revision identifier. Usually a git SHA\n  revision: BuildMetaItem;\n  // Unique parent revision identifier. Usually a git SHA from `git merge-base $revision`.\n  // This is used for default comparisons\n  parentRevision: BuildMetaItem;\n  // DateTime value representing when this build was created\n  timestamp: number;\n  // Branch name for this revision. Helps for in-progress work to be filtered from the default UI\n  branch: BuildMetaItem;\n  // Any extra information can be provided if you like\n  [key: string]: BuildMetaItem;\n}\n")),Object(i.b)("h4",{id:"buildmetaitem-string---value-string-url-string-"},Object(i.b)("inlineCode",{parentName:"h4"},"BuildMetaItem: string | { value: string; url: string }")),Object(i.b)("p",null,"Any build meta item (other than ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp"),") can either be a string ",Object(i.b)("inlineCode",{parentName:"p"},"value")," or an object containing a string ",Object(i.b)("inlineCode",{parentName:"p"},"value")," and a string ",Object(i.b)("inlineCode",{parentName:"p"},"url"),"."),Object(i.b)("p",null,"If a ",Object(i.b)("inlineCode",{parentName:"p"},"url")," is included, the web application will link the ",Object(i.b)("inlineCode",{parentName:"p"},"value")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"url"),"."),Object(i.b)("h3",{id:"artifact"},Object(i.b)("inlineCode",{parentName:"h3"},"Artifact")),Object(i.b)("p",null,"Every build artifact consists of a ",Object(i.b)("inlineCode",{parentName:"p"},"name"),", unique ",Object(i.b)("inlineCode",{parentName:"p"},"hash")," of the file for each build, and an object of keyed ",Object(i.b)("inlineCode",{parentName:"p"},"sizes"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"export interface Artifact<AS extends ArtifactSizes> {\n  // Unique hash of the contents of this artifact.\n  hash: string;\n  // Name of this build artifact\n  name: string;\n  // Computed sizes of the build artifact\n  sizes: AS;\n}\n")),Object(i.b)("h4",{id:"artifactsizes"},Object(i.b)("inlineCode",{parentName:"h4"},"ArtifactSizes")),Object(i.b)("p",null,"Artifacts can have any number of keyed sizes. The defaults provided by the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/packages/cli"}),"cli")," are ",Object(i.b)("inlineCode",{parentName:"p"},"stat"),", ",Object(i.b)("inlineCode",{parentName:"p"},"gzip"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"brotli"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"export interface ArtifactSizes {\n  // Create your own size calculations, in bytes\n  // `stat` and `gzip` sizes are most commonly used for web applications\n  [key: string]: number;\n}\n")))}b.isMDXComponent=!0},96:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var b=i.a.createContext({}),o=function(e){var t=i.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},d=function(e){var t=o(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),d=o(a),p=n,m=d["".concat(l,".").concat(p)]||d[p]||u[p]||r;return a?i.a.createElement(m,c(c({ref:t},b),{},{components:a})):i.a.createElement(m,c({ref:t},b))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var b=2;b<r;b++)l[b]=a[b];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);